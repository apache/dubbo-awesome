name: Dubbo Benchmark

on:
  workflow_dispatch:
  schedule:
    - cron: '30 * * * *'

jobs:
  benchmark_report-upload:
    needs: [benchmark-run]
    runs-on: ubuntu-latest
    name: Run Benchmark and Report
    permissions:
      contents: write
    steps:
      - name: download output
        uses: actions/download-artifact@v2
      - name: Generate Report
      - uses: actions/checkout@v2
        run: |
          mkdir benchmark
          cp *-output/*.md benchmark/ && rm -rf *-output/*.md
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: report/benchmark
          publish_dir: ./benchmark
          destination_dir: benchmark
          keep_files: true

  benchmark-report:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        target: [ "dubbo-fastjson","dubbo-gson","dubbo-grpc","dubbo-hessianlite","dubbo-kryo","dubbo-native-hessian","dubbo-protobuf-json","dubbo-triple" ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'dkisser/dubbo-benchmark'
          ref: website-benchmark-intergration
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.1
      - name: Prepare base
        run: mvn clean package -DskipTests=true -pl benchmark-base,client-base,server-base
      - name: Start server
        run: ./benchmark.sh ${{ matrix.target }}-server &
      - name: Wait server ready
        run: sleep 20
      - name: Run benchmark
        run: ./benchmark.sh -a "--warmupIterations=1 --warmupTime=1 --measurementIterations=1 --measurementTime=1" ${{ matrix.target }}-client > ${{ matrix.target }}-output.txt
      - name: Generate md file
        run: cat ./benchmark-template.json | python3 -c "import sys, json; print (json.load(sys.stdin)['${{ matrix.target }}'])" >> ${{ matrix.target }}-output.md && echo "\`\`\`java" >> ${{ matrix.target }}-output.md && cat ${{ matrix.target }}-output.txt >> ${{ matrix.target }}-output.md && echo "\`\`\`" >> ${{ matrix.target }}-output.md
      - name: Kill jobs
        run: jobs -p | grep -o -E '\s\d+\s' | xargs kill || true
      - name: Save output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-output
          path: ${{ matrix.target }}-output.md
